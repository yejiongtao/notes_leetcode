216. backtracking
code
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] nums = new int[9];
        for(int i=0; i<nums.length; i++)
            nums[i] = i+1;
        List<List<Integer>> result = new LinkedList<>();
        List<Integer> combination = new LinkedList<>();
        backtrack(result, combination, nums, 0, n, k);
        return result;
    }
    private void backtrack(List<List<Integer>> result, List<Integer> com, int[] nums, int start, 
		int target, int count) {
        if(target == 0 && count == com.size()) {
            result.add(new ArrayList<>(com));
            return;
        }
        if(com.size() >= count) return;
        for(int i = start; i < nums.length && target >= nums[i]; i++) {
            com.add(nums[i]);
            backtrack(result, com, nums, i + 1, target - nums[i], count);
            com.remove(com.size() - 1);
        }
    }

