121. code
    public int maxProfit(int[] prices) {
        int maxPro = 0, minPrice = Integer.MAX_VALUE;	// maxPro is max profit
        for(int cur: prices) {
            minPrice = Math.min(minPrice, cur);
            maxPro = Math.max(maxPro, cur - minPrice);
        }
        return maxPro;
    }

122. code
    public int maxProfit(int[] prices) {
        int total = 0;
        for(int i=1; i<prices.length; i++)
            if(prices[i] > prices[i-1])
                total += prices[i] - prices[i-1];
        return total;
    }

123. general idea
	dp[k][i] = Math.max(dp[k][i-1], prices[i] - prices[j] + dp[k-1][j]) {j in range [0, i-1]}
	         = Math.max(dp[k][i-1], prices[i] + max(dp[k-1][j] - prices[j])
code
    public int maxProfit(int[] prices) {
        if(prices.length == 0) return 0;		// cuz we use prices[0]
        int K = 2;
        int[][] dp = new int[K+1][prices.length];
        for(int k=1; k<=K; k++) {			// dp[0][i] == 0
            int tmpMax = dp[k-1][0] - prices[0];
            for(int i=1; i<prices.length; i++) {
                dp[k][i] = Math.max(dp[k][i-1], prices[i] + tmpMax);
                tmpMax = Math.max(tmpMax, dp[k-1][i] - prices[i]);	// for the calculation of dp[k][i+1]
            }
        }
        return dp[K][prices.length-1];
    }

124. O(N), one pass traversal
	a path has a highest node, we pass a node to max(TreeNode) to be the highest node of a path
code
    public int maxPathSum(TreeNode root) {
        max(root);
        return max;
    }
    private int max = Integer.MIN_VALUE;
    private int max(TreeNode root) {
        if(root == null) return 0;
        int left = Math.max(0, max(root.left)), right = Math.max(0, max(root.right));
        max = Math.max(max, root.val + left + right);
        return root.val + Math.max(left, right);	// return the value that may be part of upper path
    }

125. code
    public boolean isPalindrome(String s) {
        s = s.toLowerCase();
        int l = 0, r = s.length()-1;
        while(l < r) {
            char cl = s.charAt(l), cr = s.charAt(r);
            if(Character.isLetterOrDigit(cl) && Character.isLetterOrDigit(cr)) {
                if(cl != cr) return false;
                l++; r--;
            } else {
                if(!Character.isLetterOrDigit(cr)) r--;
                if(!Character.isLetterOrDigit(cl)) l++;
            }
        }
        return true;
    }

126. general idea, BFS
	it's like level-order traversal, with the requirement to save the legal paths
	similar to 127
code
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);
        List<List<String>> res = new LinkedList<>();
        Queue<List<String>> todo = new LinkedList<>();	// should keep the path
        List<String> initialPath = new LinkedList<>();
        initialPath.add(beginWord);
        todo.add(initialPath);
        while(!todo.isEmpty() && res.isEmpty()) {	// res.isEmpty() to ensure only shortests are returned
            int size = todo.size();
            Set<String> toBeRemoved = new HashSet<>();
            for(int i=0; i<size; i++) {
                List<String> path = todo.poll();
                char[] s = path.get(path.size()-1).toCharArray();	// last one
                for(int j=0; j<s.length; j++) {
                    char origin = s[j];
                    for(char c='a'; c<='z'; c++)
                        if(c != origin) {
                            s[j] = c;
                            String dest = String.valueOf(s);
                            if(dict.contains(dest)) {
                                List<String> newPath = new LinkedList<>(path);
                                newPath.add(dest);
                                toBeRemoved.add(dest);	// do not remove at once, cuz maybe useful to others
                                if(dest.equals(endWord))
                                    res.add(newPath);
                                else
                                    todo.add(newPath);
                            }
                            s[j] = origin;
                        }
                }
            }
            for(String s: toBeRemoved)
                dict.remove(s);
        }
        return res;
    }

127. BFS, O(N)
	it's actually finding shortest path between two node in a graph
code
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> dict = new HashSet<>(wordList);	// O(1) for searching and deleting
        Queue<String> todo = new LinkedList<>();
        todo.add(beginWord);
        int res = 1;
        while(!todo.isEmpty()) {
            res++;
            int frozenSize = todo.size();		// freeze it!
            for(int i=0; i<frozenSize; i++) {
                char[] s = todo.poll().toCharArray();
                for(int j=0; j<s.length; j++) {
                    char origin = s[j];
                    for(char k='a'; k<='z'; k++)
                        if(k != origin) {
                            s[j] = k;
                            String dest = String.valueOf(s);
                            if(dict.contains(dest)) {
                                if(dest.equals(endWord))
                                    return res;
                                todo.add(dest);
                                dict.remove(dest);
                            }
                        }
                    s[j] = origin;
                }
            }
        }
        return 0;
    }

128. O(N)
	cuz we walk through each streak only once
code
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(int n: nums) set.add(n);
        int max = 0;
        for(int n: nums)
            if(!set.contains(n-1)) {			// find the beginning of each streakÂ 
                int end = n+1;
                while(set.contains(end)) end++;		// find the end of the streak
                max = Math.max(max, end-n);
            }
        return max;
    }

129. code1, recursion
    public int sumNumbers(TreeNode root) {
        dfs(root, 0);
        return sum;
    }
    private int sum;
    private void dfs(TreeNode root, int s) {
        if(root == null) return;
        int cur = s * 10 + root.val;
        if(root.left == null && root.right == null) sum += cur;		// leaf
	else {
            dfs(root.left, cur);
            dfs(root.right, cur);
        }
    }
code2, interation
    public int sumNumbers(TreeNode root) {
        int sum = 0;
        Map<TreeNode, Integer> map = new HashMap<>();	// have to save the sum in the stack
        map.put(root, 0);		// since there's no tuple in Java, and here the order doesn't matter
					// I use a map instead
        while(!map.isEmpty()) {
            Map<TreeNode, Integer> newMap = new HashMap<>();
            for(TreeNode node: map.keySet())
                if(node != null) {
                    int cur = map.get(node) * 10 + node.val;
                    if(node.left == null && node.right == null)
                        sum += cur;
                    else {
                        newMap.put(node.left, cur);
                        newMap.put(node.right, cur);
                    }
                }
            map = newMap;
        }
        return sum;
    }

130. solutions
	DFS
		use DFS to find the O-regions that are connected to a boundary, set them to '*'
			set the remaining O's to 'X'
			set the '*'s back to 'O'
		the problem is, when there's a large O-region, using DFS results in a stack overflow!!
	Union Find
		http://blog.csdn.net/dm_vincent/article/details/7655764
code
    public void solve(char[][] board) {
        if(board.length == 0) return;
        int m = board.length, n = board[0].length;
        unionSet = new int[m*n];
        hasEdgeO = new boolean[m*n];			// identify whether this set is connected to the edge
        size = new int[m*n];
        
        for(int i=0; i<unionSet.length; i++) {
            unionSet[i] = i;
            size[i] = 1;
            int x = i/n, y = i%n;
            if((x==0 || x==m-1 || y==0 || y==n-1) && board[x][y] == 'O')
                hasEdgeO[i] = true;
        }
        for(int i=0; i<unionSet.length; i++) {		// union with the upper one and the left one
            int x = i/n, y = i%n;
            if(x > 0 && board[x-1][y] == board[x][y]) union(i, i-n);	// i-n
            if(y > 0 && board[x][y-1] == board[x][y]) union(i, i-1);
        }
        for(int i=0; i<unionSet.length; i++) {
            int x = i/n, y = i%n;
            if(board[x][y] == 'O' && !hasEdgeO[findRoot(i)])	// findRoot, cuz we only update root's hasEdgeO
                board[x][y] = 'X';
        }
    }
    private int[] unionSet;
    private boolean[] hasEdgeO;
    private int[] size;						// for a more balanced tree
    private void union(int a, int b) {
        int rootA = findRoot(a), rootB = findRoot(b);
        if(rootA == rootB) return;
        hasEdgeO[rootA] = hasEdgeO[rootB] = hasEdgeO[rootA] || hasEdgeO[rootB];
        if(size[rootA] < size[rootB]) {
            unionSet[rootA] = rootB;
            size[rootB] += size[rootA];
        } else {
            unionSet[rootB] = rootA;
            size[rootA] += size[rootB];
        }
    }
    private int findRoot(int i) {	// with the flattening, findRoot() will be O(1) amortized
        while(unionSet[i] != i) {
            unionSet[i] = unionSet[unionSet[i]];		// flatten the tree
            i = unionSet[i];
        }
        return i;
    }


BST insertion
    public TreeNode insert(TreeNode root, int val) {
        if(root == null) root = new TreeNode(val);
        if(val < root.val)
            root.left = insert(root.left, val);
        else
            root.right = insert(root.right, val);
        return root;
    }