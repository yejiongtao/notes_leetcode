1. solutions
	brute force, O(N^2)
	two-pass hash, O(N)
		create a hash table of <value, index> first
		then look in the table for complement of each value
		one problem for this is
			if nums has two identical values, it would be a pain to deal with them
	one-pass hash, O(N)
		as below
		need not worry about the identical issue, because you check before put the next pair into the map
code
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++) {
            int complement = target - nums[i];
            if(map.containsKey(complement))	// check it use this, easier than using get() with !=null
                return new int[]{map.get(complement), i};
            map.put(nums[i], i);
        }
        return null;
    }

2. general idea
	use one list as the result, so that you only worry about l2!=null
code
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = l1;
        ListNode last = null;	// have to keep the last one, so that you can link a new node to the list
        
        while(l2 != null) {
            if(l1 == null) {
                l1 = new ListNode(0);
                if(last != null)
                    last.next = l1;	// don’t forget to link it to the list
            }
            int thisVal = l2.val + l1.val;
            l1.val = thisVal % 10;
            
            last = l1;
            l1 = l1.next;
            l2 = l2.next;
            
            if(thisVal / 10 > 0)
                if(l2 == null)
                    l2 = new ListNode(1);	// do this because the last digit could be a 1 comes from the lower digits
                else
                    l2.val++;
        }
        return result;
    }

3. solutions
	brute force
		indexOf() is O(N), slow!
	sliding window
		for(int i=0, j=0; j<n; j++)
		use a HashSet to keep the existed character, if s.charAt(j) is in the set, i++
		O(N)
	optimized sliding window
		we can slide i all the way to the duplicate character, instead of i++
		O(N)
		see below
code
    public int lengthOfLongestSubstring(String s) {
        int longest = 0;
        int n = s.length();
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(int i=0,j=0; j<n; j++) {
            if(map.containsKey(s.charAt(j)))
                i = Math.max(map.get(s.charAt(j)) + 1, i);	// don’t forget max()! because we never clean up map
								// don’t forget to +1, because you start from the next one
            longest = Math.max(longest, j-i+1);
            map.put(s.charAt(j), j);				// put() cover the old value pair with a new one
        }
        
        return longest;
    }

4. general idea
	median can be calculated by (a[(n-1)/2] + a[n/2])/2.0, no matter odd or even n is
	add N+1 slots to the array
		so that in total there are 2*N+1 positions where the divider can be
		2*N+1 is an odd number, so that it becomes much more convenient
	the position of the two medians can be calculated from each other, given N1 and N2
		what we are looking for is such mid1 and mid2 that L1<=R2 && L2<=R1
	we use binary search to find mid2, where nums2 is the shorter array
		in this way we lower the time complexity to O(log(min(N1, N2)))
		time complexity of log means that in each pass, you divide the number of data by 2
code
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int N1 = nums1.length, N2 = nums2.length;
        if(N1<N2)
            return findMedianSortedArrays(nums2, nums1);	// ensure N2 is smaller
        
        if(N2 == 0)
            return (nums1[(N1-1)/2] + nums1[N1/2])/2.0;
        
	// below all positions are after adding N+1 slots
        int l=0, r=N2*2;	// the initial range is the whole array
        while(l <= r) {
            int mid2 = (l+r)/2;
            int mid1 = N1+N2-mid2;	// use some examples to calculate this
            
            double L1 = mid1==0 ? Integer.MIN_VALUE : nums1[(mid1-1)/2];	// use some examples to calculate this
            double L2 = mid2==0 ? Integer.MIN_VALUE : nums2[(mid2-1)/2];
            double R1 = mid1==N1*2 ? Integer.MAX_VALUE : nums1[mid1/2];
            double R2 = mid2==N2*2 ? Integer.MAX_VALUE : nums2[mid2/2];
            
            if(R2 < L1) 
                l = mid2+1;	
            else if(L2 > R1) 
                r = mid2-1;
            else
                return (Math.min(R1, R2) + Math.max(L1, L2)) / 2.0;
        }
        return -1;
    }

5. solution
	expand from the middle
		note that the length of the result can be either odd or even
	O(N^2)
	attention! string manipulation is slow, so avoid massive use if you can
code
    public String longestPalindrome(String s) {
        int n = s.length();
        int start = 0, end = 0;		// save the position instead of a substring to save time of string manipulation
        
        for(int i=0; i<n; i++) {
            int len1 = expand(s,i,i);		// if length of result string is odd
            int len2 = 0;
            if(i<n-1)
                len2 = expand(s, i, i+1);	// if length of result string is even
            
            int len = Math.max(len1, len2);
            if(len > end - start) {
                start = i - (len-1)/2;		// use some examples to calculate this
                end = i + len/2 + 1;
            }
        }
        return s.substring(start, end);
    }
    
    public int expand(String s, int l, int r) {
        int n = s.length();
        for(; l>=0 && r<n; l--, r++) {
            if(s.charAt(l) != s.charAt(r))
                break;
        }
        return r-l-1;
    }

6. general idea
	create numRows rows, traverse the string from the beginning and put each character in the row it’s supposed to be
		the number of blanks between each number in the result doesn’t matter, which makes it easier
code
    public String convert(String s, int numRows) {
        int len = s.length();
        StringBuffer[] sbs = new StringBuffer[numRows];
        for(int i=0; i<numRows; i++)
            sbs[i] = new StringBuffer();
        
        int i=0;
        while(i<len) {
            for(int idx=0; idx<numRows && i<len; idx++, i++)	// going down
                sbs[idx].append(s.charAt(i));
            for(int idx=numRows-2; idx>0 && i<len; idx--, i++)	// going up
                sbs[idx].append(s.charAt(i));
        }
        
        for(int j=1; j<numRows; j++)
            sbs[0].append(sbs[j]);		// you can append a StringBuffer
        
        return sbs[0].toString();
    }

7. general idea
	two ways to implement this. actually the string version is faster!
	string manipulation
		take care of overflow using Long
	number manipulation
		-1 % 10 = -1
		use a trick shown below to take care of overflow
code 1, string manipulation
    public int reverse(int x) {
        boolean isNegative = x<0;	// cannot use x=-x to get rid of the negative symbol, because if won’t work if x overflows
        
        String original = Integer.toString(x);
        StringBuffer sb = new StringBuffer();
        for(int i=original.length()-1; i>=0; i--) {
            if(isNegative && i==0)	// get rid of negative symbol
                break;
            sb.append(original.charAt(i));
        }
        long result = Long.valueOf(sb.toString());	// use Long to avoid runtime exception if the number overflows
        if(result > Integer.MAX_VALUE)
            return 0;
        if(isNegative)
            result = -result;
        return (int)result;
    }
code 2, number manipulation
    public int reverse(int x) {
        int result = 0;
        
        while(x != 0) {
            int tail = x % 10;
            int newResult = result * 10 + tail;
            if((newResult - tail)/10 != result)		// take care of overflow!!
                return 0;
            result = newResult;
            x /= 10;
        }
        return result;
    }

8. general idea
	several things to deal with
		blank at the beginning
		an optional sign symbol
		overflow
		invalid characters in the end
	the difficulty lays on dealing overflows
code
    public int myAtoi(String str) {
        str = str.trim();
        int base = 0, i = 0;
        boolean isNegative = false;
        
        str += " ";		// SMART! add a trivial character in the end, so that you needn’t worry about index out of bound
            
        if(str.charAt(i) == '-') {
            isNegative = true;
            i++;
        } else if(str.charAt(i) == '+')
            i++;
        
        char c = str.charAt(i);
        while(c >= '0' && c <= '9') {	// needn’t worry about invalid characters
            if(base > Integer.MAX_VALUE/10 || base == Integer.MAX_VALUE/10 && c > '7') {	// here! overflow!
                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;
            }
            base = base * 10 + c - '0';
            c = str.charAt(++i);
        }
        return isNegative ? -base : base;
    }