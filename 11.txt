111. tricky point
	[a,b] should return 2 instead of 1
	cuz "The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node"
code
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        if(root.left == null) return 1 + minDepth(root.right);
        if(root.right == null) return 1 + minDepth(root.left);
        return 1 + Math.min(minDepth(root.left), minDepth(root.right));
    }

112. code
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) return false;
        if(root.left == null && root.right == null && sum == root.val) return true;
        return hasPathSum(root.left, sum-root.val) || hasPathSum(root.right, sum-root.val);
    }

113. code
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new LinkedList<>();
        getPath(res, new LinkedList<>(), root, sum);
        return res;
    }
    private void getPath(List<List<Integer>> res, List<Integer> path, TreeNode root, int sum) {
        if(root == null) return;
        path.add(root.val);			// watch out!
        if(root.left == null && root.right == null && root.val == sum) {
            res.add(new ArrayList<>(path));
            path.remove(path.size()-1);		// watch out
            return;
        }
        getPath(res, path, root.left, sum-root.val);
        getPath(res, path, root.right, sum-root.val);
        path.remove(path.size()-1);
    }

114. code
    public void flatten(TreeNode root) {
        flat(root);
    }
    private TreeNode flat(TreeNode root) {	// returns the last node
        if(root == null) return null;
        TreeNode l = flat(root.left), r = flat(root.right);
        if(l != null) {				// if l==null, already done
            l.right = root.right;		// l is the last node of the left subtree, root.left is the first node
            root.right = root.left;
            root.left = null;			// watch out!
        }
        return r == null ? (l == null ? root : l) : r;	// the order of l and r cannot be changed
    }

115. DP
	e.g. s = "abb", t = "ab"
	when i=2, j=3
		t[i-1] == s[j-1]
		so, dp[2][3] = dp[1][2] + dp[2][2]
code
    public int numDistinct(String s, String t) {
        int lenT = t.length(), lenS = s.length();
        int[][] dp = new int[lenT+1][lenS+1];
        for(int i=0; i<lenT+1; i++)
            for(int j=0; j<lenS+1; j++)
                if(i == 0) dp[i][j] = 1;		// watch out
                else if(j != 0) { 
	            if(t.charAt(i-1) == s.charAt(j-1))
                        dp[i][j] = dp[i-1][j-1]*1 + dp[i][j-1];
                    else dp[i][j] = dp[i][j-1];
	        }
        return dp[lenT][lenS];
    }

116. O(1) space, so no stack, no recursion!
	make use of the 'next' pointer you've created
code
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        TreeLinkNode head = root;		// head is the first node of each level
        while(head.left != null) {
            TreeLinkNode cur = head;
            while(cur != null) {
                cur.left.next = cur.right;
                if(cur.next != null)
                    cur.right.next = cur.next.left;
                cur = cur.next;
            }
            head = head.left;
        }
    }

117. code
    public void connect(TreeLinkNode root) {
        TreeLinkNode cur = root;
        while(cur != null) {
            TreeLinkNode dummyChild = new TreeLinkNode(0), curChild = dummyChild;	// dummy!!!! 
            while(cur != null) {
                if(cur.left != null) {
                    curChild.next = cur.left;
                    curChild = curChild.next;
                }
                if(cur.right != null) {
                    curChild.next = cur.right;
                    curChild = curChild.next;
                }
                cur = cur.next;
            }
            cur = dummyChild.next;
        }
    }

118. code
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res = new ArrayList<>();	// better than LinkedList, cuz random access is frequent
        for(int i=1; i<=numRows; i++) {
            List<Integer> row = new ArrayList<>();
            for(int j=0; j<i; j++)
                if(j==0 || j==i-1) row.add(1);
                else row.add(res.get(i-2).get(j-1) +res.get(i-2).get(j));
            res.add(row);
        }
        return res;
    }

119. code
    public List<Integer> getRow(int rowIndex) {
        List<Integer> row = new ArrayList<>(rowIndex+1);	// initial capacity, to avoid expanding
        for(int len=1; len<=rowIndex+1; len++) {
            row.add(1);
            for(int j=len-2; j>0; j--)		// from the last but two to the second
                row.set(j, row.get(j) + row.get(j-1));
        }
        return row;
    }

120. bottom-up, O(1), brilliant!!
code
    public int minimumTotal(List<List<Integer>> triangle) {
        for(int i=triangle.size()-2; i>=0; i--)
            for(int j=0; j <= i; j++)
                triangle.get(i).set(j, triangle.get(i).get(j) + Math.min(triangle.get(i+1).get(j), triangle.get(i+1).get(j+1)));
        return triangle.get(0).get(0);
    }