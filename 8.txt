81. worst case O(N)
	when nums[l] >= nums[mid] >= nums[r]
		since it's impossible for nums[l]>nums[mid]>nums[r]
		we move the one ==nums[mid]
code
    public boolean search(int[] nums, int target) {
        int l = 0, r = nums.length-1;
        while(l <= r) {
            int mid = (l+r)/2;
            if(nums[mid] == target) return true;
            if(nums[mid] < nums[r]) {		// right half is sorted
                if(nums[mid] < target && target <= nums[r])
                    l = mid+1;
                else
                    r = mid-1;
            } else if(nums[l] < nums[mid]) {	// left half is sorted
                if(nums[l] <= target && target < nums[mid])
                    r = mid-1;
                else
                    l = mid+1;
            } else {				// with duplicates, now have this else
                if(nums[l] == nums[mid]) l++;	// one of nums[l] and nums[r] must ==nums[mid]
                else r--;
            }
        }
        return false;
    }

82. code
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(0), pre = dummy, cur = head;
        dummy.next = head;
        while(cur != null) {
            while(cur.next != null && cur.val == cur.next.val)	// get to the last node of this value
                cur = cur.next;
            if(pre.next == cur)	{	// if there's only one of this value, keep it
                pre = pre.next;
                cur = cur.next;
            } else {
                pre.next = cur.next;	// more than one of this value, remove them all
                cur = cur.next;
            }
        }
        return dummy.next;
    }

83. similar to 82
code
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(0), pre = dummy, cur = head;
        dummy.next = head;
        while(cur != null) {
            while(cur.next != null && cur.val == cur.next.val)
                cur = cur.next;
            pre.next = cur;
            pre = cur;
            cur = cur.next;
        }
        return dummy.next;
    }

84. solutions
	1. O(N^2), one by one consider all bars as starting points
	2. O(NlogN), divide and conquer, see code1
		find the smallest bar, largest area is the maximum of the three below
			largest area in the left side of it
			largest area in the right side of it
			smallest height * number of all bars
	3. O(N), see code2. to calculate the max area when each bar is used as the height
		every bar is pushed into stack once
		a bar is popped from the stack when a bar of smaller height is seen
		when a bar is popped, we calculate the area with the popped bar as the smallest height
code1
    public int largestRectangleArea(int[] heights) {
        return largest(heights, 0, heights.length-1);
    }
    private int largest(int[] heights, int start, int end) {
        if(start > end) return 0;		// ending point
        int min = Integer.MAX_VALUE, idx = -1;
        for(int i=start; i<=end; i++)		// O(N)
            if(heights[i] <= min) {	// <=, cuz the min value could be Integer.MAX_VALUE
                min = heights[i];
                idx = i;
            }
        return Math.max((end-start+1)*min, 	// divide O(logN)
            Math.max(largest(heights, start, idx-1), largest(heights, idx+1, end)));
    }
code2
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int max = 0;
        for(int i=0; i <= heights.length; i++) {	// <=, to deal with the last one inside the for-loop
            int thisH = i==heights.length ? 0 : heights[i];
            while(!stack.isEmpty() && thisH < heights[stack.peek()]) {
                int h = heights[stack.pop()];
                max = Math.max(max, h * (i-1- (stack.isEmpty() ? -1 : stack.peek())));
            }
            stack.push(i);
        }
        return max;
    }

85. solutions
	1. based on Largest Rectangle in Histogram, O(mn)
	2. DP, O(mn)
		area(i,j) = [right(i,j) - left(i,j)] * height(i,j)
			where right(i,j) is the right boundary of the rectangle where i,j is in
		right, left and height can all be calculated from the last row and this row, so DP can be used
code1
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int max = 0;
        int[] row = new int[matrix[0].length];
        for(char[] r: matrix) {
            for(int i=0; i<r.length; i++)
                if(r[i] == '0')
                    row[i] = 0;
                else
                    row[i]++;
            max = Math.max(max, maxArea(row));
        }
        return max;
    }
    private int maxArea(int[] nums) {
        Stack<Integer> stack = new Stack<>();
        int max = 0;
        for(int i=0; i<=nums.length; i++) {
            int thisH = i==nums.length ? 0 : nums[i];
            while(!stack.isEmpty() && thisH < nums[stack.peek()]) {
                int h = nums[stack.pop()];
                max = Math.max(max, h*(i-1- (stack.isEmpty() ? -1 : stack.peek())));
            }
            stack.push(i);
        }
        return max;
    }
code2
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int m = matrix.length, n = matrix[0].length, max = 0;
        int[] h = new int[n], l = new int[n], r = new int[n];
        for(int j=0; j<n; j++)			// initialization
            r[j] = n-1;
            
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++)
                h[j] = matrix[i][j]=='0' ? 0 : h[j]+1;
            for(int j=0, curLeft=0; j<n; j++) {
                if(matrix[i][j] == '0') {
                    curLeft = j+1;
                    l[j] = 0;			// important! if '0', then this l should not affect l in the next line
                } else
                    l[j] = Math.max(curLeft, l[j]);		// watch out
            }
            for(int j=n-1, curRight = n-1; j>=0; j--) {		// from right to left
                if(matrix[i][j] == '0') {
                    curRight = j-1;				// watch out
                    r[j] = n-1;
                } else
                    r[j] = Math.min(curRight, r[j]);
            }
            for(int j=0; j<n; j++)
                max = Math.max(max, h[j]*(r[j]-l[j]+1));
        }
        return max;
    }

86. code
    public ListNode partition(ListNode head, int x) {
        ListNode dummy1 = new ListNode(0), dummy2 = new ListNode(0), tail1 = dummy1, tail2 = dummy2;
        ListNode cur = head;
        while(cur != null) {
            if(cur.val < x) {
                tail1.next = cur;
                tail1 = tail1.next;
            } else {
                tail2.next = cur;
                tail2 = tail2.next;
            }
            cur = cur.next;
        }
        tail1.next = dummy2.next;
        tail2.next = null;		// watch out
        return dummy1.next;
    }

87. general idea
	if equals, is scramble
	else, split the strings into two parts, compare them separately
		notice that there are two ways of spliting, which is the essential of scrambling
	exponential, I think
		if we only consider the for-loop at the bottom, T(N) = c(T(N-1)+T(N-2)+...+T(1)), c is a constant
		if c=1, then T(N) = O(2^N), so I believe it's exponential
code
    public boolean isScramble(String s1, String s2) {
        if(s1.equals(s2)) return true;
        
        Map<Character, Integer> map = new HashMap<>();
        for(char c: s1.toCharArray())
            map.put(c, map.containsKey(c) ? map.get(c)+1 : 1);
        for(char c: s2.toCharArray())
            if(!map.containsKey(c)) return false;
            else {
                if(map.get(c) == 1) map.remove(c);
                else map.put(c, map.get(c)-1);
            }
            
        int len = s1.length();
        for(int i=1; i<len; i++) {		// starts from 1
            if(isScramble(s1.substring(0, i), s2.substring(0, i)) && isScramble(s1.substring(i), s2.substring(i)))
                return true;
            if(isScramble(s1.substring(0, i), s2.substring(len-i)) && isScramble(s1.substring(i), s2.substring(0, len-i)))
                return true;
        }
        return false;
    }

88. general idea
	starts from the end of the array
code
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m-1, j = n-1, tail = m+n-1;
        while(j >= 0) {		// only worry about j, cuz if j<0, then the rest of nums1 is already in position
            if(i >= 0) {
                if(nums1[i] > nums2[j])
                    nums1[tail--] = nums1[i--];
                else
                    nums1[tail--] = nums2[j--];
            } else
                nums1[tail--] = nums2[j--];
        }
    }

89. general idea
	you can generate graycode of 3 from that of 2
		graycode of 2:  00  01  11  10
		graycode of 3:(000 001 011 010)(110 111 101 100)
			except the first digit, the second part is symmetric of the first part
			cuz in this way, the middle two numbers vary in only the first digit
code
    public List<Integer> grayCode(int n) {
        List<Integer> result = new ArrayList<>();	// ArrayList is better, cuz we do locating very often
        result.add(0);			// it says non-negative n, so no worry of 0
        for(int i=0; i<n; i++)
            for(int j=result.size()-1; j>=0; j--)	// result.size() changes, but since we use it once, it's alright
                result.add(result.get(j) | 1<<i);	// otherwise you should put it out of the for-loop
        return result;
    }

90. code
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new LinkedList<>();
        getSub(result, new LinkedList<>(), nums, 0);
        return result;
    }
    private void getSub(List<List<Integer>> result, List<Integer> sub, int[] nums, int start) {
        result.add(new ArrayList<>(sub));
        for(int i=start; i<nums.length; i++)
            if(!(i != start && nums[i] == nums[i-1])) {		// here's the difference from SubSet1
                sub.add(nums[i]);
                getSub(result, sub, nums, i+1);
                sub.remove(sub.size()-1);
            }
    }