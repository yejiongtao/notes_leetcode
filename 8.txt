81. worst case O(N)
	when nums[l] >= nums[mid] >= nums[r]
		since it's impossible for nums[l]>nums[mid]>nums[r]
		we move the one ==nums[mid]
code
    public boolean search(int[] nums, int target) {
        int l = 0, r = nums.length-1;
        while(l <= r) {
            int mid = (l+r)/2;
            if(nums[mid] == target) return true;
            if(nums[mid] < nums[r]) {		// right half is sorted
                if(nums[mid] < target && target <= nums[r])
                    l = mid+1;
                else
                    r = mid-1;
            } else if(nums[l] < nums[mid]) {	// left half is sorted
                if(nums[l] <= target && target < nums[mid])
                    r = mid-1;
                else
                    l = mid+1;
            } else {				// with duplicates, now have this else
                if(nums[l] == nums[mid]) l++;	// one of nums[l] and nums[r] must ==nums[mid]
                else r--;
            }
        }
        return false;
    }

82. code
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(0), pre = dummy, cur = head;
        dummy.next = head;
        while(cur != null) {
            while(cur.next != null && cur.val == cur.next.val)	// get to the last node of this value
                cur = cur.next;
            if(pre.next == cur)		// if there's only one of this value, keep it
                pre = pre.next;
            else
                pre.next = cur.next;	// more than one of this value, remove them all
            cur = pre.next;
        }
        return dummy.next;
    }

83. code
    public ListNode deleteDuplicates(ListNode head) {
        ListNode dummy = new ListNode(0), pre = dummy, cur = head;
        dummy.next = head;
        while(cur != null) {
            if(cur.next != null && cur.next.val == cur.val) {
                cur = cur.next;		// watch out! set the new cur and pre
                pre.next = cur;
            } else {
                cur = cur.next;
                pre = pre.next;
            }
        }
        return dummy.next;
    }

84. solutions
	1. O(N^2), one by one consider all bars as starting points
	2. O(NlogN), divide and conquer, see code1
		find the smallest bar, largest area is the maximum of the three below
			largest area in the left side of it
			largest area in the right side of it
			smallest height * number of all bars
	3. O(N), see code2. to calculate the max area when each bar is used as the height
		every bar is pushed into stack once
		a bar is popped from the stack when a bar of smaller height is seen
		when a bar is popped, we calculate the area with the popped bar as the smallest height
code1
    public int largestRectangleArea(int[] heights) {
        return largest(heights, 0, heights.length-1);
    }
    private int largest(int[] heights, int start, int end) {
        if(start > end) return 0;		// ending point
        int min = Integer.MAX_VALUE, idx = -1;
        for(int i=start; i<=end; i++)		// O(N)
            if(heights[i] <= min) {	// <=, cuz the min value could be Integer.MAX_VALUE
                min = heights[i];
                idx = i;
            }
        return Math.max((end-start+1)*min, 	// divide O(logN)
            Math.max(largest(heights, start, idx-1), largest(heights, idx+1, end)));
    }
code2
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> stack = new Stack<>();
        int max = 0;
        for(int i=0; i <= heights.length; i++) {	// <=, to deal with the last one inside the for-loop
            int thisH = i==heights.length ? 0 : heights[i];
            while(!stack.isEmpty() && thisH < heights[stack.peek()]) {
                int h = heights[stack.pop()];
                max = Math.max(max, h * (i-1- (stack.isEmpty() ? -1 : stack.peek())));
            }
            stack.push(i);
        }
        return max;
    }

85. solutions
	1. based on Largest Rectangle in Histogram, O(mn)
	2. DP, O(mn)
		area(i,j) = [right(i,j) - left(i,j)] * height(i,j)
			where right(i,j) is the right boundary of the rectangle where i,j is in
		right, left and height can all be calculated from the last row and this row, so DP can be used
code1
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int max = 0;
        int[] row = new int[matrix[0].length];
        for(char[] r: matrix) {
            for(int i=0; i<r.length; i++)
                if(r[i] == '0')
                    row[i] = 0;
                else
                    row[i]++;
            max = Math.max(max, maxArea(row));
        }
        return max;
    }
    private int maxArea(int[] nums) {
        Stack<Integer> stack = new Stack<>();
        int max = 0;
        for(int i=0; i<=nums.length; i++) {
            int thisH = i==nums.length ? 0 : nums[i];
            while(!stack.isEmpty() && thisH < nums[stack.peek()]) {
                int h = nums[stack.pop()];
                max = Math.max(max, h*(i-1- (stack.isEmpty() ? -1 : stack.peek())));
            }
            stack.push(i);
        }
        return max;
    }
code2
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int m = matrix.length, n = matrix[0].length, max = 0;
        int[] h = new int[n], l = new int[n], r = new int[n];
        for(int j=0; j<n; j++)			// initialization
            r[j] = n-1;
            
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++)
                h[j] = matrix[i][j]=='0' ? 0 : h[j]+1;
            for(int j=0, curLeft=0; j<n; j++) {
                if(matrix[i][j] == '0') {
                    curLeft = j+1;
                    l[j] = 0;			// important! if '0', then this l should not affect l in the next line
                } else
                    l[j] = Math.max(curLeft, l[j]);		// watch out
            }
            for(int j=n-1, curRight = n-1; j>=0; j--) {		// from right to left
                if(matrix[i][j] == '0') {
                    curRight = j-1;				// watch out
                    r[j] = n-1;
                } else
                    r[j] = Math.min(curRight, r[j]);
            }
            for(int j=0; j<n; j++)
                max = Math.max(max, h[j]*(r[j]-l[j]+1));
        }
        return max;
    }