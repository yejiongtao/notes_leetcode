101. recursive solution
	similar to 100
iterative solution
	watch out! a symmetric binary tree's in-order traversal is symmetric
		but an in-order traversal is not efficient to prove a binary tree is symmetric
	the idea is to implement the calling stack of the recursive way
code1
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        return isSymmetric(root.left, root.right);
    }
    private boolean isSymmetric(TreeNode l, TreeNode r) {
        if(l == null && r == null) return true;
        if(l == null || r == null) return false;
        return l.val == r.val && isSymmetric(l.left, r.right) && isSymmetric(l.right, r.left);
    }
code2
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root.left);
        stack.push(root.right);
        while(!stack.isEmpty()) {
            TreeNode node1 = stack.pop(), node2 = stack.pop();
            if(node1 == null && node2 == null) continue;
            if(node1 == null || node2 == null || node1.val != node2.val) return false;
            stack.push(node1.left);
            stack.push(node2.right);
            stack.push(node1.right);
            stack.push(node2.left);
        }
        return true;
    }

102. code, BFS, can be easily changed to iterative
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new LinkedList<>();
        List<TreeNode> nodes = Arrays.asList(root);
        level(result, nodes);
        return result;
    }
    private void level(List<List<Integer>> result, List<TreeNode> nodes) {
        List<Integer> res = new LinkedList<>();
        List<TreeNode> next = new LinkedList<>();
        for(TreeNode n: nodes)
            if(n != null) {
                res.add(n.val);
                next.add(n.left);
                next.add(n.right);
            }
        if(!res.isEmpty()) {
            result.add(res);
            level(result, next);
        }
    }

103. similar to 102
code
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        List<TreeNode> nodes = Arrays.asList(root);	// ATTENTION! the List created via asList is unmodifiable!!
        level(res, nodes, true);			// AND! changing the backing array changes the list as well!
        return res;
    }
    private void level(List<List<Integer>> res, List<TreeNode> nodes, boolean left) {
        List<Integer> nums = new LinkedList<>();
        List<TreeNode> next = new LinkedList<>();
        for(TreeNode n: nodes)
            if(n != null) {
                nums.add(n.val);
                next.add(n.left);
                next.add(n.right);
            }
        if(!nums.isEmpty()) {
            if(!left) Collections.reverse(nums);	// here, O(1)
            res.add(nums);
            level(res, next, !left);
        }
    }

104. code
    public int maxDepth(TreeNode root) {
        if(root == null) return 0;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }

105. general idea
	preorder[0] is the root node
	we can find the preorder[0] in inorder, let's say it's inorder[5]
	then inorder[0...4] are on the left, inorder[6....] are on the right
code
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return build(0, 0, inorder.length-1, preorder, inorder);
    }
    private TreeNode build(int preStart, int inStart, int inEnd, int[] preorder, int[] inorder) {
        if(inStart > inEnd) return null;
        TreeNode root = new TreeNode(preorder[preStart]);
        int idx = 0;
        for(int i=inStart; i<=inEnd; i++)
            if(inorder[i] == preorder[preStart]) {	// definitely can be found
                idx = i;
                break;					// actually no need to break, cuz it says no duplicates
            }
        root.left = build(preStart+1, inStart, idx-1, preorder, inorder);
        root.right = build(preStart+1+idx-inStart, idx+1, inEnd, preorder, inorder);	// brilliant!!!
        return root;	// idx-inStart is the number of nodes in the left subtree
    }

106. code
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return build(postorder.length-1, 0, inorder.length-1, postorder, inorder);
    }
    private TreeNode build(int post, int inStart, int inEnd, int[] postorder, int[] inorder) {
        if(inStart > inEnd) return null;
        TreeNode root = new TreeNode(postorder[post]);
        int idx = 0;
        for(int i=inStart; i<=inEnd; i++)
            if(inorder[i] == postorder[post])
                idx = i;
        root.left = build(post-1-(inEnd-idx), inStart, idx-1, postorder, inorder);
        root.right = build(post-1, idx+1, inEnd, postorder, inorder);
        return root;
    }

107. code
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        List<TreeNode> nodes = Arrays.asList(root);
        level(res, nodes);
        Collections.reverse(res);	// only here. LinkedList is a doubly-linked list, so reverse is O(1)
        return res;
    }
    private void level(List<List<Integer>> res, List<TreeNode> nodes) {
        List<Integer> nums = new LinkedList<>();
        List<TreeNode> next = new LinkedList<>();
        for(TreeNode n: nodes)
            if(n != null) {
                nums.add(n.val);
                next.add(n.left);
                next.add(n.right);
            }
        if(!nums.isEmpty()) {
            res.add(nums);
            level(res, next);
        }
    }

108. code
    public TreeNode sortedArrayToBST(int[] nums) {
        int l = 0, r = nums.length-1;
        return build(l, r, nums);
    }
    private TreeNode build(int l, int r, int[] nums) {
        if(l > r) return null;
        int mid = (l+r)/2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = build(l, mid-1, nums);
        root.right = build(mid+1, r, nums);
        return root;
    }

109. solutions
	1. O(N) space, O(N) time
		create an array from the list and the use 108
	2. O(logN) space, O(NlogN) time
		for every subtree, move to the middle, see code2
		O(logN) space for the stack
	3. O(logN) space, O(N) time
		make use of the inorder traversal
code2
    public TreeNode sortedListToBST(ListNode head) {
        return build(head, null);
    }
    private TreeNode build(ListNode head, ListNode tail) {	// tail is not included
        if(head == tail) return null;
        ListNode slow = head, fast = head;
        while(fast != tail && fast.next != tail) {		// brilliant
            fast = fast.next.next;
            slow = slow.next;
        }
        TreeNode root = new TreeNode(slow.val);
        root.left = build(head, slow);
        root.right = build(slow.next, tail);
        return root;
    }
code3
    public TreeNode sortedListToBST(ListNode head) {
        cur = head;
        int count = 0;
        while(head != null) {
            count++;
            head = head.next;
        }
        return build(0, count-1);
    }
    private ListNode cur;
    private TreeNode build(int l, int r) {
        if(l > r) return null;
        int mid = (l+r)/2;
        TreeNode left = build(l, mid-1);		// left first, inorder traversal
        TreeNode root = new TreeNode(cur.val);
        cur = cur.next;					// update cur before calling build() again
        root.left = left;
        root.right = build(mid+1, r);
        return root;
    }

110. solutions
	top-down, O(NlogN)?
	bottom-up, O(N)
code1
    public boolean isBalanced(TreeNode root) {
        if(root == null) return true;
        return Math.abs(depth(root.left)-depth(root.right)) <= 1 
            && isBalanced(root.left) && isBalanced(root.right);
    }
    private int depth(TreeNode r) {
        return r==null ? 0 : 1 + Math.max(depth(r.left), depth(r.right));
    }
code 2
    public boolean isBalanced(TreeNode root) {
        return depth(root) != -1;		// -1 means is not balanced
    }
    private int depth(TreeNode root) {
        if(root == null) return 0;
        int left = depth(root.left), right = depth(root.right);
        if(left == -1 || right == -1) return -1;
        if(Math.abs(left - right) > 1) return -1;
        return 1 + Math.max(left, right);
    }